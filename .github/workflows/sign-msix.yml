name: MSIX Signing

on:
  push:
    branches:
      - main

jobs:
  sign-msix:
    runs-on: windows-latest
    
    steps:
      # Step 1: Checkout the code repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install PowerShell module for certificate creation
      - name: Install PowerShell module
        run: Install-Module -Name PSScriptTools -Force -Scope CurrentUser

      # Step 3: Generate self-signed certificate using PowerShell
      - name: Generate self-signed certificate
        run: |
          # Generate the self-signed certificate
          $cert = New-SelfSignedCertificate -CertStoreLocation Cert:\CurrentUser\My -DnsName "CN=Ravbug" -KeyAlgorithm RSA -KeyLength 2048 -NotAfter (Get-Date).AddYears(1)
          
          # Export the certificate to .cer (certificate) format for later usage in signing
          Export-Certificate -Cert $cert -FilePath "$env:GITHUB_WORKSPACE\certificate.cer"
        shell: pwsh

      # Step 4: Set paths for MSIX and certificate
      - name: Set paths for MSIX and certificate
        run: |
          $msixFilePath = "$env:GITHUB_WORKSPACE\sdl-min_1.0.0.0_x64.msix"
          $certificatePath = "$env:GITHUB_WORKSPACE\certificate.cer"
          echo "MSIX file path: $msixFilePath"
          echo "Certificate path: $certificatePath"
        shell: pwsh

      # Step 5: Unpack the MSIX file
      - name: Unpack MSIX file
        run: |
          # Full path to MakeAppx for unpacking
          $makeAppxPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\SDK\Microsoft.VisualStudio.Package.Folder\bin\MakeAppx.exe"
          $unpackedFolderPath = "$env:GITHUB_WORKSPACE\unpacked"
          
          # Unpack the MSIX file to a temporary directory using the VS developer command prompt
          Start-Process -FilePath "cmd.exe" -ArgumentList "/c ""C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Tools\vsdevcmd.bat"" && MakeAppx unpack /p $msixFilePath /d $unpackedFolderPath" -Wait
        shell: pwsh

      # Step 6: Sign the unpacked MSIX package
      - name: Sign MSIX package
        run: |
          # Full path to SignTool
          $signToolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
          $unpackedFolderPath = "$env:GITHUB_WORKSPACE\unpacked"
          
          # Sign the unpacked MSIX package using SignTool
          Start-Process -FilePath $signToolPath -ArgumentList "sign /s MY /n ""Ravbug"" /t http://timestamp.digicert.com /v $unpackedFolderPath\appxmanifest.xml" -Wait
        shell: pwsh

      # Step 7: Repack the signed MSIX package
      - name: Repack the signed MSIX package
        run: |
          # Repack the signed MSIX package
          $msixFilePath = "$env:GITHUB_WORKSPACE\sdl-min_1.0.0.0_x64.msix"
          $makeAppxPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\SDK\Microsoft.VisualStudio.Package.Folder\bin\MakeAppx.exe"
          
          # Repack the MSIX file after signing
          Start-Process -FilePath "cmd.exe" -ArgumentList "/c ""C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Tools\vsdevcmd.bat"" && MakeAppx pack /d $unpackedFolderPath /p $msixFilePath" -Wait
        shell: pwsh

      # Step 8: Upload signed MSIX
      - name: Upload signed MSIX
        uses: actions/upload-artifact@v4
        with:
          name: signed-msix
          path: ${{ github.workspace }}/sdl-min_1.0.0.0_x64.msix
