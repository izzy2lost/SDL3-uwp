name: Build Sample

on: [push, pull_request]

jobs:
  build-win:
    name: Build for Windows UWP
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64]
        target: [WindowsStore]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: df270daa8d6d48426e128e50c73357dfdf89afbf
          submodules: true

      - name: Configure
        run: cmake -DCMAKE_SYSTEM_NAME=${{ matrix.target }} -DCMAKE_SYSTEM_VERSION="10.0" -A${{ matrix.arch }} -S . -B build

      - name: Build
        run: cmake --build build --target sdl-min --config Release

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
        shell: pwsh

      - name: Add Signtool Action
        uses: KamaranL/add-signtool-action@v1

      - name: Sign the MSIX Package
        run: |
          $certThumbprint = $env:THUMBPRINT
          $cert = Get-ChildItem -Path "Cert:\CurrentUser\My" | Where-Object { $_.Thumbprint -eq $certThumbprint }
          if (-not $cert) {
            Write-Host "Certificate not found. Aborting signing step."
            exit 1
          }
          $msixPath = "D:\a\SDL3-uwp\SDL3-uwp\build\AppPackages\sdl-min\sdl-min_1.0.0.0_x64_Test\sdl-min_1.0.0.0_x64.msix"
          if (!(Test-Path $msixPath)) {
            Write-Host "MSIX file not found!"
            exit 1
          }
          signtool sign /sha1 $certThumbprint /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$msixPath"
        shell: pwsh

      - name: Archive MSIX Package
        run: |
          Compress-Archive -Path build/AppPackages/sdl-min/**/*.msix -DestinationPath build/AppPackages/sdl-min-${{ matrix.target }}-${{ matrix.arch }}.zip
        shell: pwsh

      - name: Upload MSIX Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdl-min-${{ matrix.target }}-${{ matrix.arch }}
          path: build/AppPackages/sdl-min-${{ matrix.target }}-${{ matrix.arch }}.zip
